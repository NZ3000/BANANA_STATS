---
title: "Banana,US"
author: "Team 1 (Rohozhynskyi, Nezghovorov, Matkivskyi, Bobrov, Bobrovnik)"
date: "01/14/2025"

execute:
  echo: false
  
format: 
  html:
    math: true
    toc: true  # Enable the table of contents
    toc-title: "Contents"  # Set the TOC title
    toc-depth: 2  # Limit TOC depth level
    code-fold: true  # Allow code blocks to be collapsible
    code-tools: false  # Show tools for code blocks (like copy button)
    code-copy: true  # Enable copy button for code blocks
    theme: Materia  # Use the "Lux" Bootswatch theme
    smooth-scroll: true  # Enable smooth scrolling for TOC links
    embed-resources: true  # Embed external resources directly
---

```{r}
#| echo: false
#| message: false
#| warning: false

# Set a CRAN mirror
options(repos = c(CRAN = "https://cran.rstudio.com"))

# install.packages('ggplot2')
# install.packages('ggthemes')
# install.packages("stargazer")
# install.packages("wooldridge")
# install.packages("knitr")
# install.packages("modelsummary")
# install.packages("naniar")
# install.packages("kableExtra")
# install.packages("lmtest")
# install.packages("tsibble")
# install.packages("fable")
# install.packages("lubridate")
# install.packages("forecast")
# install.packages("urca")
# install.packages("broom")
# install.packages("plm")
# install.packages("fabletools")
# install.packages("lubridate")
# install.packages("plotly")
# install.packages("fpp3")
# install.packages("MuMIn")





library(ggplot2)
library(ggthemes)
library(stargazer)
library(wooldridge)
library(knitr)
library(dplyr)
library(car)
library(modelsummary)
library(readxl)
library(naniar)
library(kableExtra)
library(lmtest)
library(tidyr)
library(tsibble)
library(lubridate)
library(forecast)
library(urca)
library(broom)
library(plm)
library(readr)
library(fable)
library(fabletools)
library(lubridate)
library(plotly)
library(gganimate)
library(fpp3)
library(tseries)
library(MuMIn)

invisible(Sys.setlocale("LC_TIME", "en_US.UTF-8")) # Set months in English without output
```

# MP part 1

```{r}

banana_tsibble <- suppressMessages(
  read_csv("Cleaned_Commodity_Prices.csv", show_col_types = FALSE) |>
    select(Year, Month, `Banana, US`) |>
    mutate(Date = yearmonth(paste(Year, Month, sep = "-"))) |>
    select(Date, `Banana, US`) |>                             
    as_tsibble(index = Date)
)
```

```{r}

summary <- tibble(
  Metric = c("Start Year", "End Year", "Total Observations", "Min Price", "Max Price", "Mean Price", "Standard Deviation"),
  Value = c(
    format(as.integer(min(year(banana_tsibble$Date))), nsmall = 0),
    format(as.integer(max(year(banana_tsibble$Date))), nsmall = 0),
    format(nrow(banana_tsibble), nsmall = 0),
    round(min(banana_tsibble$`Banana, US`, na.rm = TRUE), 2),
    round(max(banana_tsibble$`Banana, US`, na.rm = TRUE), 2),
    round(mean(banana_tsibble$`Banana, US`, na.rm = TRUE), 2),
    round(sd(banana_tsibble$`Banana, US`, na.rm = TRUE), 2)
  )
)

knitr::kable(summary, col.names = c("Metric", "Value"), caption = "Banana Prices Dataset")
```

> The World Bank compiled and published US banana price data in Commodity Markets Outlook. These prices are in US dollars per kilogram, represent the average market rates from global banana trade.

```{r}
# Create an interactive line plot with plotly

p <- ggplot(banana_tsibble, aes(x = Date, y = `Banana, US`)) +
  geom_line(color = "blue") +
  ggtitle("Banana Prices Over Time (Levels)") +
  xlab("Date") +
  ylab("Price (US $/kg)") +
  theme_minimal()

# Convert ggplot to an interactive plotly object
ggplotly(p) %>%
  layout(title = "Banana Prices Over Time",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Price (US $/kg)"))
```

### Historical Events Affecting Banana Prices

-   **1973–1979**: Oil crises led to increased transportation costs, causing price fluctuations.
-   **Late 1990s**: Weather events (El Niño/La Niña) and changing trade policies caused instability.
-   **2005–2015**: Steep price increase due to rising production costs, hurricanes, and higher global demand.
-   **2022**: Sharp price drop driven by COVID-19 supply chain disruptions, inflation, and possible overproduction.
-   **2024**: Post COVID restore.

The banana market is influenced by weather conditions, geopolitical factors, pest outbreaks, and supply chain dynamics.

```{r}
# Create new columns for logs and first differences
banana_tsibble <- banana_tsibble %>%
  mutate(
    Log_Price = log(`Banana, US`),
    Diff_Price = difference(`Banana, US`)
  )

# Log-transformed prices
ggplot(banana_tsibble, aes(x = Date, y = Log_Price)) +
  geom_line(color = "darkgreen") +
  ggtitle("Log of Banana Prices Over Time") +
  xlab("Date") +
  ylab("Log Price (Log US $/kg)") +
  theme_minimal()

banana_tsibble_diff <- banana_tsibble %>% filter(!is.na(Diff_Price))

# Plot first differences
ggplot(banana_tsibble_diff, aes(x = Date, y = Diff_Price)) +
  geom_line(color = "red") +
  ggtitle("First Differences of Banana Prices Over Time") +
  xlab("Date") +
  ylab("Price Difference (US $/kg)") +
  theme_minimal()
```

> Log of Banana Prices Over Time Сhart reveals a long-term upward trend in banana prices, indicating consistent growth in proportional rather than nominal changes.<br>

> First Differences of Banana Prices Over Time reveals significant volatility in price changes over time, with notable spikes around the 2000s and 2020. The fluctuations become more pronounced as time progresses, suggesting an increase in the variability of price adjustments in the later years.

```{r}
banana_tsibble |>
  mutate(Month = month(Date, label = TRUE),   # Extract month as a factor
         Year = year(Date),                   # Extract year
         Decade = floor(Year / 10) * 10) |>   # Create a decade variable
  filter(Year %% 3 == 0) |>                   # Select only years divisible by 3
  ggplot(aes(x = Month, y = `Banana, US`, color = factor(Year), group = Year)) +
  geom_line() +
  labs(y = "$ (USD)",
       title = "Seasonal Plot: Banana Prices in US by Decade (Sampled Years)") +
  facet_wrap(~ Decade, scales = "fixed", ncol = 2) +  # Two columns for better readability
  theme_minimal() +
  theme(legend.position = "none",               # Remove the legend
        axis.text.x = element_text(angle = 45, hjust = 1))
```

> The seasonal plot shows that banana prices in the US exhibit minimal seasonal variation across decades, with a slight tendency for prices to peak around mid-year in some decades, such as the 2000s and 2020s. Overall, the trend reflects a relatively stable price pattern within each year, likely due to consistent supply and demand dynamics for bananas.

```{r}
# Histogram and Kernel Density for Levels
ggplot(banana_tsibble, aes(x = `Banana, US`)) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "lightblue", color = "black") +
  geom_density(alpha = 0.4, fill = "blue") +
  ggtitle("Histogram and Kernel Density of Banana Prices (Levels)") +
  xlab("Price (US $/kg)") +
  ylab("Density") +
  theme_minimal()
```

> The histogram and kernel density plot reveal that banana prices in the US are positively skewed, with the majority of prices clustering below \$0.5 per kilogram. However, there is a long tail extending toward higher price levels, indicating occasional periods of elevated prices that are less frequent.

```{r}
# Histogram and Kernel Density for Logs
ggplot(banana_tsibble, aes(x = log(`Banana, US`))) +
  geom_histogram(aes(y = after_stat(density)), bins = 30, fill = "lightgreen", color = "black") +
  geom_density(alpha = 0.4, fill = "green") +
  ggtitle("Histogram and Kernel Density of Log-Banana Prices") +
  xlab("Log Price (Log US $/kg)") +
  ylab("Density") +
  theme_minimal()
```

> The histogram and kernel density plot of the logarithm of banana prices exhibit a multimodal distribution, indicating distinct clusters of price levels over time. This transformation reduces skewness and highlights the presence of multiple regimes or patterns in banana pricing, potentially linked to market structure changes or external shocks.

```{r}
# Ensure banana_tsibble is correctly formatted as a tsibble
banana_tsibble <- banana_tsibble %>%
  as_tsibble(index = Date)

# Create lagged values
banana_lagged <- banana_tsibble %>%
  mutate(Lag_1 = dplyr::lag(`Banana, US`, 1)) %>%  # Use dplyr::lag for clarity
  filter(!is.na(Lag_1))                            # Remove NA values caused by lagging

# Scatter plot of levels vs lagged levels
ggplot(banana_lagged, aes(x = Lag_1, y = `Banana, US`)) +
  geom_point(color = "blue", alpha = 0.5) +        # Add transparency for better visualization
  ggtitle("Scatter Plot: Banana Prices vs Lagged Banana Prices") +
  xlab("Lagged Price (US $/kg)") +
  ylab("Price (US $/kg)") +
  theme_minimal()
```

> The scatter plot of banana prices versus lagged prices demonstrates a strong positive linear relationship, indicating high persistence in price levels over time. This suggests that banana prices exhibit significant autocorrelation, with current prices being highly dependent on their immediate past values.

```{r}
# Calculate first differences of the time series
banana_diff <- banana_tsibble %>%
  mutate(Diff_Price = difference(`Banana, US`)) %>%
  filter(!is.na(Diff_Price))

ggAcf(banana_diff$Diff_Price) +
  ggtitle("Autocorrelation Function (ACF) of First Differences") +
  ylab("ACF") +
  xlab("Lag") +
  theme_minimal()
```

> The ACF plot of the first differences indicates that there is little significant autocorrelation at most lags, suggesting that the differencing has effectively removed the trend and made the series closer to stationarity. However, a few significant spikes at specific lags suggest some short-term dependencies or patterns still present in the data.

```{r}
banana_tsibble |>
  mutate(Month = month(Date, label = TRUE)) |>  # Extract Month as factor
  ggplot(aes(x = Month, y = `Banana, US`)) +
  geom_boxplot(fill = "lightblue", alpha = 0.6) +  # Boxplot
  stat_summary(fun = mean, geom = "line", aes(group = 1), color = "blue", linewidth = 1) +  # Mean line
  labs(y = "$/kg", 
       title = "Boxplot of Banana Prices by Month with Mean Line",
       x = "Month") +
  theme_minimal()
```

> The boxplot of banana prices by month shows relatively consistent median prices throughout the year, with minor seasonal variation as the mean line slightly decreases from February to September. The presence of outliers across months indicates occasional price volatility, but overall, monthly price distributions appear stable. \## Insights from the Boxplot:

1.  **Price Stability**:

    -   Most boxes have a similar size and position, indicating relatively stable banana prices throughout the year.
    -   There are no sharp changes in medians between months, meaning average banana prices remain at a similar level year-round.

2.  **Price Variability**:

    -   The whiskers are quite long, showing significant variability in prices across different years.
    -   The highest variability is observed in **January, June, and September**, as their whiskers are the longest, and there are several outliers.

3.  **Outliers**:

    -   Outliers appear in several months, especially in **January, June, and December**, which may indicate extreme banana prices in specific years.
    -   These outliers might be caused by economic or climatic events affecting banana supply during these periods.

    ```{r}
    banana_tsibble %>%
      mutate(Month = month(Date, label = TRUE)) %>%
      ggplot(aes(x = year(Date), y = `Banana, US`, color = Month)) +
      geom_line(alpha = 0.5) +
      geom_smooth(method = "loess", formula = y ~ x, se = FALSE, linewidth = 1) +
      facet_wrap(~ Month, scales = "free_y") +
      labs(
        title = "Subseries Plot: Banana Prices by Month (Improved)",
        x = "Year",
        y = "Price (US $/kg)"
      ) +
      theme_minimal() +
      theme(legend.position = "none")
    ```

    ### Comments on Subseries Plot

-   Banana prices show an **upward trend** across all months.
-   **Higher variability** is observed in recent years.
-   Prices exhibit a **consistent seasonal pattern** with peaks occurring around similar times each year.

# Mini Project in R part 2: ARIMA

### Task 1: Produce an STL decomposition of the data and describe the trend and seasonality.

```{r}
banana_ts <- ts(banana_tsibble$`Banana, US`, frequency = 12, start = c(min(year(banana_tsibble$Date)), min(month(banana_tsibble$Date))))

# Perform STL decomposition
banana_stl <- stl(banana_ts, s.window = "periodic")

# Plot the STL decomposition
autoplot(banana_stl) +
  ggtitle("STL Decomposition of Banana Prices") +
  theme_minimal()
  
# Extract and describe components
trend <- banana_stl$time.series[, "trend"]
seasonal <- banana_stl$time.series[, "seasonal"]
remainder <- banana_stl$time.series[, "remainder"]

# Summary of components
cat("Trend Summary:\n")
summary(trend)

cat("\nSeasonality Summary:\n")
summary(seasonal)

cat("\nRemainder Summary:\n")
summary(remainder)
```

```{r}

# Plot the remainder component from STL decomposition to observe variance
autoplot(banana_stl$time.series[, "remainder"]) +
  ggtitle("Remainder Component from STL Decomposition") +
  xlab("Time") +
  ylab("Remainder") +
  theme_minimal()
```

### Trend and Seasonality of Banana Prices

The analysis shows:

-   **Trend**: Banana prices have been steadily increasing over the years, reaching their highest point at 1.62 \$/kg before dropping in 2024. On average, prices have trended around 0.54 \$/kg over time.

-   **Seasonality**: Prices follow a clear yearly pattern, going slightly up and down throughout each year. These changes balance out, with an average seasonal effect of zero.

-   **Remainder**: There are also some unpredictable short-term changes in prices. These jumps are usually small, but sometimes they are larger, ranging from -0.18 to 0.26 \$/kg.

This means banana prices generally grow over time, follow a seasonal pattern each year, and occasionally show unexpected short-term changes.

#### 2.Do the data need transforming? If so, find a suitable transformation.

```{r}
# Perform a Box-Cox transformation test
lambda <- BoxCox.lambda(banana_ts)
cat("Suggested Box-Cox Transformation Lambda:", lambda, "\n")

# Apply Box-Cox transformation if lambda is not close to 1
if (abs(lambda - 1) > 0.1) {
  banana_ts_transformed <- BoxCox(banana_ts, lambda)
  # Plot transformed data
  autoplot(banana_ts_transformed) +
    ggtitle("Transformed Banana Prices") +
    theme_minimal()
} else {
  cat("No transformation needed as lambda is close to 1.")
}
```

## Data Transformation

The data required transformation because its variance was not stable over time, as seen in the original time series plot. A **Box-Cox transformation** was applied with a lambda value of -0.318, which successfully stabilized the variance, making the data suitable for further analysis.

#### 3.Are the data stationary? If not, find an appropriate differencing which yields stationary data. Please discuss if you need seasonal differencing (and do if necessary)

```{r}
# Plot ACF and PACF of transformed data
ggAcf(banana_ts_transformed) +
  ggtitle("ACF of Transformed Data") +
  theme_minimal()

ggPacf(banana_ts_transformed) +
  ggtitle("PACF of Transformed Data") +
  theme_minimal()
```

The ACF and PACF plots show the data is not stationary because there is strong autocorrelation. To make it stationary, we need to apply first-order differencing to remove the trend and seasonal differencing (lag 12) to handle yearly patterns.

```{r}
# Perform Augmented Dickey-Fuller Test
adf_test <- suppressWarnings(adf.test(banana_ts_transformed, alternative = "stationary"))
cat("ADF Test p-value:", adf_test$p.value, "\n")

# Apply Seasonal Differencing if needed
banana_ts_diff <- diff(banana_ts_transformed, lag = 12)  # Seasonal differencing

# Plot ACF/PACF after differencing
ggAcf(banana_ts_diff) +
  ggtitle("ACF of Differenced Data") +
  theme_minimal()

ggPacf(banana_ts_diff) +
  ggtitle("PACF of Differenced Data") +
  theme_minimal()

# Re-run ADF Test on Differenced Data
adf_test_diff <- suppressWarnings(adf.test(banana_ts_diff, alternative = "stationary"))
cat("ADF Test on Differenced Data p-value:", adf_test_diff$p.value, "\n")
```

### Seasonal Differencing and Stationarity Check

Seasonal differencing was applied to the banana price data to address non-stationarity.\
- The **ACF** shows reduced autocorrelation, and the **PACF** has a sharp cutoff, indicating improved stationarity.\
- The **ADF test p-value** is **0.01**, confirming the data is stationary after differencing.

The data is now ready for ARIMA modeling.

#### 4.Identify a couple of ARIMA models (including auto ARIMA) that might be useful in describing the time series, by examining ACF/PACF. Which of your models is the best according to their AICc values?

```{r}
# Automatically identify the best ARIMA model
auto_arima_model <- auto.arima(banana_ts_transformed, seasonal = TRUE)
summary(auto_arima_model)

# Manually specify two alternative ARIMA models for comparison
arima_model_1 <- Arima(banana_ts_transformed, order = c(1, 1, 1), seasonal = c(0, 0, 2))
arima_model_2 <- Arima(banana_ts_transformed, order = c(2, 1, 2), seasonal = c(1, 1, 1))

# Display AICc values for all models
cat("AICc for Auto ARIMA:", AICc(auto_arima_model), "\n")
cat("AICc for ARIMA(1,1,1)(0,0,2):", AICc(arima_model_1), "\n")
cat("AICc for ARIMA(2,1,2)(1,1,1):", AICc(arima_model_2), "\n")
```

## Model Selection Comments

To select the best ARIMA model, we analyzed the ACF and PACF of differenced data and used their patterns to determine parameters.

-   **ARIMA(1,1,1)(0,0,2):**
    -   **p (AR order):** Lag 1 is significant in the PACF.
    -   **d (differencing):** Stationarity achieved with first differencing.
    -   **q (MA order):** Lag 1 is significant in the ACF.
    -   **P, D, Q (seasonal):** Seasonal MA lag 2 based on ACF; no seasonal AR.
-   **ARIMA(2,1,2)(1,1,1):**
    -   **p (AR order):** PACF suggests lags 1 and 2.
    -   **d (differencing):** Stationarity achieved with first differencing.
    -   **q (MA order):** ACF suggests lags 1 and 2.
    -   **P, D, Q (seasonal):** Seasonal AR (lag 1), differencing, and MA (lag 1).

The best model, **ARIMA(2,1,2)(1,1,1)**, had the lowest AICc, showing a better balance of fit and complexity compared to Auto ARIMA and ARIMA(1,1,1)(0,0,2).

#### 5.Estimate the parameters of your preferred model and do diagnostic testing on the residuals. Do the residuals resemble white noise? If not, try to find another ARIMA model which fits better.

```{r}
# Load necessary libraries
library(forecast)
library(ggplot2)
library(cowplot)

# Step 1: Test the chosen model (ARIMA(2,1,2)(1,1,1))
chosen_model <- Arima(banana_ts_transformed, order = c(2, 1, 2), seasonal = c(1, 1, 1))

# Print chosen model AICc
cat("Chosen Model: ARIMA(2,1,2)(1,1,1)\n")
cat("AICc:", AICc(chosen_model), "\n")

# Residual diagnostics for chosen model
ljung_box_chosen <- Box.test(residuals(chosen_model), lag = 24, fitdf = length(chosen_model$coef), type = "Ljung-Box")
cat("Ljung-Box Test p-value for Chosen Model:", ljung_box_chosen$p.value, "\n")

# Plot residual diagnostics for the chosen model
acf_chosen <- ggAcf(residuals(chosen_model)) +
  ggtitle("ACF of Residuals (Chosen Model)") +
  theme_minimal()

pacf_chosen <- ggPacf(residuals(chosen_model)) +
  ggtitle("PACF of Residuals (Chosen Model)") +
  theme_minimal()

# Display plots for the chosen model
cat("\nResidual Diagnostics for Chosen Model\n")
cowplot::plot_grid(acf_chosen, pacf_chosen, labels = c("A", "B"))

# Step 2: Refine the model if residuals do not resemble white noise
if (ljung_box_chosen$p.value < 0.05) {
  cat("\nResiduals indicate white noise assumption is violated. Refining model...\n")
  
  # Refined Models
  refined_model_1 <- Arima(banana_ts_transformed, order = c(2, 1, 3), seasonal = c(1, 1, 1))
  refined_model_2 <- Arima(banana_ts_transformed, order = c(3, 1, 2), seasonal = c(1, 1, 1))
  
  # Compare AICc values
  aicc_1 <- AICc(refined_model_1)
  aicc_2 <- AICc(refined_model_2)
  
  cat("AICc for ARIMA(2,1,3)(1,1,1):", aicc_1, "\n")
  cat("AICc for ARIMA(3,1,2)(1,1,1):", aicc_2, "\n")
  
  # Select the better refined model
  if (aicc_1 < aicc_2) {
    best_model <- refined_model_1
    cat("Selected Refined Model: ARIMA(2,1,3)(1,1,1)\n")
  } else {
    best_model <- refined_model_2
    cat("Selected Refined Model: ARIMA(3,1,2)(1,1,1)\n")
  }
  
  # Residual diagnostics for the refined model
  refined_ljung_box <- Box.test(residuals(best_model), lag = 24, fitdf = length(best_model$coef), type = "Ljung-Box")
  cat("Ljung-Box Test p-value for Refined Model:", refined_ljung_box$p.value, "\n")
  
  # Plot residual diagnostics for the refined model
  acf_refined <- ggAcf(residuals(best_model)) +
    ggtitle("ACF of Residuals (Refined Model)") +
    theme_minimal()
  
  pacf_refined <- ggPacf(residuals(best_model)) +
    ggtitle("PACF of Residuals (Refined Model)") +
    theme_minimal()
  
  cat("\nResidual Diagnostics for Refined Model\n")
  cowplot::plot_grid(acf_refined, pacf_refined, labels = c("C", "D"))
} else {
  cat("\nResiduals resemble white noise. No further refinement needed.\n")
}
```

## Residual Diagnostics Comments

### Chosen Model: ARIMA(2,1,2)(1,1,1)

-   **Ljung-Box Test p-value**: 0.0026 indicates residuals do not resemble white noise. Refinement is needed.
-   **ACF/PACF Diagnostics**: Residual plots show significant autocorrelations, suggesting room for improvement.

### Refined Model: ARIMA(2,1,3)(1,1,1)

-   **Ljung-Box Test p-value**: 0.1245 confirms residuals resemble white noise.
-   **ACF/PACF Diagnostics**: No significant autocorrelations, indicating the model is a good fit.

**Conclusion**: The refined model ARIMA(2,1,3)(1,1,1) is better, as residuals are uncorrelated and satisfy white noise conditions.

#### 6. Assuming you have a list of possible models, please pick up your model based on how accurate they predict, using the training and test parts of your data.

```{r}
# Load necessary libraries
library(forecast)
library(ggplot2)

# Split data into training and test sets
set.seed(123)  # Set seed for reproducibility
n <- length(banana_ts_transformed)
train_end <- floor(0.8 * n)  # 80% of the data for training
train_data <- window(banana_ts_transformed, end = c(time(banana_ts_transformed)[train_end]))
test_data <- window(banana_ts_transformed, start = c(time(banana_ts_transformed)[train_end + 1]))

# Fit models to the training data
model_1 <- Arima(train_data, order = c(2, 1, 2), seasonal = c(1, 1, 1))  # ARIMA(2,1,2)(1,1,1)
model_2 <- Arima(train_data, order = c(2, 1, 3), seasonal = c(1, 1, 1))  # ARIMA(2,1,3)(1,1,1)
model_3 <- Arima(train_data, order = c(3, 1, 2), seasonal = c(1, 1, 1))  # ARIMA(3,1,2)(1,1,1)

# Forecast on test data
forecast_1 <- forecast(model_1, h = length(test_data))
forecast_2 <- forecast(model_2, h = length(test_data))
forecast_3 <- forecast(model_3, h = length(test_data))

# Calculate accuracy metrics
accuracy_1 <- accuracy(forecast_1, test_data)
accuracy_2 <- accuracy(forecast_2, test_data)
accuracy_3 <- accuracy(forecast_3, test_data)

# Display accuracy results
cat("Accuracy for ARIMA(2,1,2)(1,1,1):\n")
print(accuracy_1)

cat("\nAccuracy for ARIMA(2,1,3)(1,1,1):\n")
print(accuracy_2)

cat("\nAccuracy for ARIMA(3,1,2)(1,1,1):\n")
print(accuracy_3)

# Select the best model based on RMSE
rmse_values <- c(accuracy_1["Test set", "RMSE"], 
                 accuracy_2["Test set", "RMSE"], 
                 accuracy_3["Test set", "RMSE"])
best_model_index <- which.min(rmse_values)

cat("\nBest Model Based on RMSE:\n")
if (best_model_index == 1) {
  cat("ARIMA(2,1,2)(1,1,1)\n")
  best_model <- model_1
} else if (best_model_index == 2) {
  cat("ARIMA(2,1,3)(1,1,1)\n")
  best_model <- model_2
} else {
  cat("ARIMA(3,1,2)(1,1,1)\n")
  best_model <- model_3
}

# Plot forecasts of the best model
autoplot(forecast(best_model), series = "Forecast") +
  autolayer(test_data, series = "Test Data", color = "red") +
  ggtitle("Best Model Forecast vs Test Data") +
  xlab("Time") +
  ylab("Banana Prices") +
  theme_minimal()
```

## Model Accuracy and Selection

We evaluated three ARIMA models—ARIMA(2,1,2)(1,1,1), ARIMA(2,1,3)(1,1,1), and ARIMA(3,1,2)(1,1,1)—using RMSE and other accuracy metrics on training and test sets. Based on RMSE, ARIMA(2,1,2)(1,1,1) was selected as the best model since it provided the lowest RMSE value on the test set.

The forecast plot demonstrates how the chosen model predicts test data, capturing the overall trend while slightly diverging in some parts. Confidence intervals highlight uncertainty, but the model remains robust for predictive purposes.

#### 7.Eventually, do out-of-sample forecast for the next month. How many months of forecasts

do you think are sufficiently accurate to be usable?

```{r}
# Step 1: Fit the best model to the full dataset
final_model <- Arima(banana_ts_transformed, order = c(2, 1, 2), seasonal = c(1, 1, 1))

# Step 2: Forecast for the next 12 months
forecast_horizon <- 12  # Forecasting 12 months ahead
forecast_results <- forecast(final_model, h = forecast_horizon)

# Step 3: Create a time window for plotting (focus on 2000 onwards)
forecast_plot_data <- window(banana_ts_transformed, start = c(2000, 1))  # Filter data from 2000
final_forecast <- forecast(final_model, h = forecast_horizon)  # Generate the forecast

# Step 4: Plot the forecast with a focus on 2000 onwards
autoplot(forecast_plot_data) +
  autolayer(final_forecast, series = "Forecast", PI = TRUE) +
  xlab("Time") +
  ylab("Transformed Banana Prices") +
  ggtitle("Out-of-Sample Forecast for Banana Prices (2000 Onwards)") +
  theme_minimal()

# Step 5: Display forecast table for next 12 months
cat("Forecast Results for the Next 12 Months:\n")
print(forecast_results)

# Step 6: Short Explanation
cat("The forecast is suitable for short-term predictions, typically 3-6 months, with higher uncertainty for longer horizons.")
```

## Final Comments on Forecasting

The **ARIMA(2,1,2)(1,1,1)** model was used to generate forecasts for the next 12 months. The forecast results show: - **Short-term accuracy**: Predictions for the first 3-6 months are reliable, as evidenced by narrower confidence intervals. - **Long-term uncertainty**: Beyond 6 months, the confidence intervals widen significantly, reflecting increased uncertainty in predictions.

This suggests that the model is suitable for short-term planning, while long-term forecasts should be interpreted with caution.
